// This is your Prisma schema file
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User profiles (extends Supabase auth.users)
model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique // Maps to Supabase auth.users.id
  displayName String?
  avatarUrl   String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  budgets             Budget[]
  sharedBudgets       SharedBudget[]
  sentPartnerRequests PartnerRequest[] @relation("SentRequests")
  receivedPartnerRequests PartnerRequest[] @relation("ReceivedRequests")
  partnerships Partnership[] @relation("UserPartnerships")
  partnerOf    Partnership[] @relation("PartnerOfUser")
  imports             StatementImport[] @relation("UserImports")
  transactions        Transaction[] @relation("UserTransactions")

  @@map("profiles")
}

// User's personal budget data
model Budget {
  id         String   @id @default(uuid())
  userId     String
  user       Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  year       Int
  month      String   // "january", "february", etc.
  budgetData Json     // Stores income, expenses, bills, savings, debt arrays
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, year, month])
  @@map("budgets")
}

// Shared budgets for family members
model SharedBudget {
  id          String   @id @default(uuid())
  name        String
  description String?
  budgetData  Json     // Stores the budget data as JSON
  ownerId     String
  owner       Profile  @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  sharedWith  String[] // Array of user IDs who have access
  permissions Json     // { userId: "view" | "edit" }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shared_budgets")
}

// Accountability partner requests
model PartnerRequest {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  message    String?
  status     String   // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  fromUser Profile @relation("SentRequests", fields: [fromUserId], references: [userId], onDelete: Cascade)
  toUser   Profile @relation("ReceivedRequests", fields: [toUserId], references: [userId], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@map("partner_requests")
}

// Active accountability partnerships
model Partnership {
  id          String   @id @default(uuid())
  userId      String
  partnerId   String
  goalType    String   // "savings", "debt", "spending", "custom"
  goalTarget  Float?
  goalDetails Json?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    Profile @relation("UserPartnerships", fields: [userId], references: [userId], onDelete: Cascade)
  partner Profile @relation("PartnerOfUser", fields: [partnerId], references: [userId], onDelete: Cascade)

  // Check-ins and updates
  checkIns CheckIn[]

  @@unique([userId, partnerId])
  @@map("partnerships")
}

// Check-ins for accountability
model CheckIn {
  id            String   @id @default(uuid())
  partnershipId String
  partnership   Partnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  userId        String
  message       String
  progress      Float?
  createdAt     DateTime @default(now())

  @@map("check_ins")
}

// Community tips and shared wisdom
model CommunityTip {
  id          String   @id @default(uuid())
  authorId    String
  category    String   // "savings", "budgeting", "debt", "income"
  title       String
  content     String
  tags        String[]
  upvotes     Int      @default(0)
  upvotedBy   String[] // Array of user IDs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("community_tips")
}

// Budget challenges
model Challenge {
  id          String   @id @default(uuid())
  name        String
  description String
  type        String   // "savings", "no-spend", "debt-payoff", "custom"
  startDate   DateTime
  endDate     DateTime
  goalAmount  Float?
  participants String[] // Array of user IDs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("challenges")
}

// Invitation links for sharing and partnerships
model Invitation {
  id           String   @id @default(uuid())
  token        String   @unique // Unique shareable token
  inviterId    String   // User who created invitation
  inviterEmail String   // For display purposes
  inviterName  String?  // Display name of inviter
  type         String   // "partner", "budget", "both"
  budgetId     String?  // Optional: if sharing specific budget
  message      String?  // Optional personal message
  expiresAt    DateTime // Invitation expiration
  maxUses      Int      @default(1) // How many people can use this link
  usedCount    Int      @default(0)
  usedBy       String[] @default([]) // Array of user IDs who used this
  createdAt    DateTime @default(now())

  @@map("invitations")
}

// Bank statement imports
model StatementImport {
  id           String        @id @default(uuid())
  userId       String
  user         Profile       @relation("UserImports", fields: [userId], references: [userId], onDelete: Cascade)
  fileName     String
  fileType     String        // "csv", "pdf", "ofx"
  importDate   DateTime      @default(now())
  status       String        // "processing", "completed", "failed"
  totalTransactions Int      @default(0)
  processedTransactions Int  @default(0)
  errorMessage String?

  transactions Transaction[]

  @@map("statement_imports")
}

// Individual transactions from bank statements
model Transaction {
  id                String   @id @default(uuid())
  userId            String
  user              Profile  @relation("UserTransactions", fields: [userId], references: [userId], onDelete: Cascade)
  importId          String?
  import            StatementImport? @relation(fields: [importId], references: [id], onDelete: SetNull)

  // Transaction details
  date              DateTime
  description       String
  amount            Float
  transactionType   String   // "debit", "credit"

  // AI categorization
  aiCategory        String?  // AI's initial categorization
  aiConfidence      Float?   // Confidence score 0-100
  aiSubcategory     String?  // More specific category

  // User categorization
  category          String   // "income", "expense", "bill", "savings", "debt", "transfer"
  subcategory       String?  // User's specific subcategory
  budgetItemName    String?  // Link to specific budget item

  // Spending type
  spendingType      String?  // "fixed", "flexible", "discretionary"

  // Metadata
  isRecurring       Boolean  @default(false)
  recurringPattern  String?  // "monthly", "weekly", "biweekly"
  merchantName      String?
  notes             String?

  // User review
  isReviewed        Boolean  @default(false)
  wasRecategorized  Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId, date])
  @@index([category])
  @@map("transactions")
}

// Spending trends and predictions
model SpendingTrend {
  id              String   @id @default(uuid())
  userId          String
  category        String
  subcategory     String?

  // Historical data
  monthlyAverage  Float
  monthlyMin      Float
  monthlyMax      Float
  last3Months     Float[]
  last6Months     Float[]

  // Predictions
  nextMonthPrediction Float
  confidenceLevel     Float   // 0-100
  trend               String  // "increasing", "decreasing", "stable"

  // Analysis period
  analysisDate    DateTime @default(now())
  dataPoints      Int      // Number of months analyzed

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, category, subcategory])
  @@map("spending_trends")
}

// Merchant categorization learning
model MerchantMapping {
  id            String   @id @default(uuid())
  userId        String?  // Null = global mapping
  merchantName  String
  normalizedName String  // Cleaned merchant name
  category      String
  subcategory   String?
  spendingType  String?
  isUserDefined Boolean  @default(false)
  useCount      Int      @default(1)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, normalizedName])
  @@index([normalizedName])
  @@map("merchant_mappings")
}
